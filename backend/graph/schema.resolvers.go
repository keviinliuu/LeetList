package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"fmt"
	"log"

	"github.com/keviinliuu/leetlist/graph/model"
)

// CreateQuestion is the resolver for the createQuestion field.
func (r *mutationResolver) CreateQuestion(ctx context.Context, input model.NewQuestion) (*model.Question, error) {
	question := model.Question{
		Title:      input.Title,
		URL:        input.URL,
		Difficulty: input.Difficulty,
		Complete:   false,
	}

	err := r.DB.Create(&question).Error
	if err != nil {
		log.Fatal(err)
		return nil, err
	}

	return &question, nil
}

// UpdateQuestion is the resolver for the updateQuestion field.
func (r *mutationResolver) UpdateQuestion(ctx context.Context, id string, input model.UpdateQuestion) (*model.Question, error) {
	var question model.Question 

	err := r.DB.First(&question, "id = ?", id).Error
	if err != nil {
		log.Fatal(err)
		return nil, err
	}

	if input.Title != nil {
		question.Title = *input.Title 
	}
	if input.URL != nil {
		question.URL = *input.URL 
	}
	if input.Difficulty != nil {
		question.Difficulty = *input.Difficulty
	}

	err = r.DB.Save(&question).Error
	if err != nil {
		return nil, err 
	}

	return &question, nil
}

// CreateList is the resolver for the createList field.
func (r *mutationResolver) CreateList(ctx context.Context, input model.NewList) (*model.List, error) {
	panic(fmt.Errorf("not implemented: CreateList - createList"))
}

// UpdateList is the resolver for the updateList field.
func (r *mutationResolver) UpdateList(ctx context.Context, id string, input model.UpdateList) (*model.List, error) {
	panic(fmt.Errorf("not implemented: UpdateList - updateList"))
}

// Question is the resolver for the question field.
func (r *queryResolver) Question(ctx context.Context, id string) (*model.Question, error) {
	var question model.Question

	err := r.DB.First(&question, "id = ?", id).Error
	if err != nil {
		log.Fatal(err)
		return nil, err
	}

	return &question, nil
}

// Questions is the resolver for the questions field.
func (r *queryResolver) Questions(ctx context.Context) ([]*model.Question, error) {
	var questions []*model.Question 

	err := r.DB.Find(&questions).Error
	if err != nil {
		log.Fatal(err)
		return nil, err
	}

	return questions, nil
}

// List is the resolver for the list field.
func (r *queryResolver) List(ctx context.Context, id string) (*model.List, error) {
	panic(fmt.Errorf("not implemented: List - list"))
}

// Lists is the resolver for the lists field.
func (r *queryResolver) Lists(ctx context.Context) ([]*model.List, error) {
	panic(fmt.Errorf("not implemented: Lists - lists"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
