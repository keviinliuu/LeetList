package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"

	"github.com/keviinliuu/leetlist/graph/model"
	"github.com/keviinliuu/leetlist/util"
)

// CreateQuestion is the resolver for the createQuestion field.
func (r *mutationResolver) CreateQuestion(ctx context.Context, input model.NewQuestion) (*model.Question, error) {
	question := model.Question{
		Title:      input.Title,
		URL:        input.URL,
		Difficulty: input.Difficulty,
		Complete:   false,
	}

	err := r.DB.Create(&question).Error
	if err != nil {
		return nil, err
	}

	return &question, nil
}

// UpdateQuestion is the resolver for the updateQuestion field.
func (r *mutationResolver) UpdateQuestion(ctx context.Context, id string, input model.UpdateQuestion) (*model.Question, error) {
	var question model.Question

	err := r.DB.First(&question, "id = ?", id).Error
	if err != nil {
		return nil, err
	}

	if input.Title != nil {
		question.Title = *input.Title
	}
	if input.URL != nil {
		question.URL = *input.URL
	}
	if input.Difficulty != nil {
		question.Difficulty = *input.Difficulty
	}

	err = r.DB.Save(&question).Error
	if err != nil {
		return nil, err
	}

	return &question, nil
}

// CreateList is the resolver for the createList field.
func (r *mutationResolver) CreateList(ctx context.Context, input model.NewList) (*model.List, error) {
	list := model.List{
		Title:       input.Title,
		Description: input.Description,
	}

	entries := []*model.Question{}

	for _, qInput := range input.Entries {
		if qInput == nil {
			continue
		}

		question, err := r.CreateQuestion(ctx, *qInput)
		if err != nil {
			return nil, err
		}
		entries = append(entries, question)
	}

	list.Entries = entries

	err := r.DB.Create(&list).Error
	if err != nil {
		return nil, err
	}

	return &list, err
}

// UpdateList is the resolver for the updateList field.
func (r *mutationResolver) UpdateList(ctx context.Context, id string, input model.UpdateList) (*model.List, error) {
	var list model.List

	err := r.DB.Preload("Entries").First(&list, "id = ?", id).Error
	if err != nil {
		return nil, err
	}

	if input.Title != nil {
		list.Title = *input.Title
	}
	if input.Description != nil {
		list.Description = input.Description
	}

	for _, qInput := range input.AddQuestions {
		if qInput == nil {
			continue
		}

		question, err := r.CreateQuestion(ctx, *qInput)
		if err != nil {
			return nil, err
		}
		list.Entries = append(list.Entries, question)
	}

	for _, qID := range input.RemoveQuestionIds {
		err := r.DB.Model(&list).Association("Entries").Delete(&model.Question{ID: qID})
		if err != nil {
			return nil, err
		}

		var question model.Question

		err = r.DB.Where("id = ?", qID).Delete(&question).Error
		if err != nil {
			return nil, err
		}
	}

	err = r.DB.Save(&list).Error
	if err != nil {
		return nil, err
	}

	return &list, nil
}

// Question is the resolver for the question field.
func (r *queryResolver) Question(ctx context.Context, id string) (*model.Question, error) {
	var question model.Question

	err := r.DB.First(&question, "id = ?", id).Error
	if err != nil {
		return nil, err
	}

	return &question, nil
}

// Questions is the resolver for the questions field.
func (r *queryResolver) Questions(ctx context.Context) ([]*model.Question, error) {
	var questions []*model.Question

	err := r.DB.Find(&questions).Error
	if err != nil {
		return nil, err
	}

	return questions, nil
}

// List is the resolver for the list field.
func (r *queryResolver) List(ctx context.Context, id string) (*model.List, error) {
	var list model.List

	err := r.DB.Preload("Entries").First(&list, "id = ?", id).Error
	if err != nil {
		return nil, err
	}

	return &list, nil
}

// Lists is the resolver for the lists field.
func (r *queryResolver) Lists(ctx context.Context) ([]*model.List, error) {
	var lists []*model.List

	err := r.DB.Preload("Entries").Find(&lists).Error
	if err != nil {
		return nil, err
	}

	return lists, nil
}

// ScrapeQuestion is the resolver for the scrapeQuestion field.
func (r *queryResolver) ScrapeQuestion(ctx context.Context, url string) (*model.QuestionInfo, error) {
	title, difficulty := util.GetQuestionInfo(url, r.Browser)

	return &model.QuestionInfo{
		Title:      title,
		Difficulty: difficulty,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
