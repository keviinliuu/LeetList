// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AuthPayload struct {
	Token *string `json:"token,omitempty"`
	User  *User   `json:"user,omitempty"`
}

type List struct {
	ID          string      `json:"ID"`
	Title       string      `json:"title"`
	Description *string     `json:"description,omitempty"`
	Entries     []*Question `gorm:"many2many:list_questions;"`
}

type Mutation struct {
}

type NewList struct {
	Title       string         `json:"title"`
	Description *string        `json:"description,omitempty"`
	Entries     []*NewQuestion `json:"entries"`
}

type NewQuestion struct {
	Title      string     `json:"title"`
	URL        string     `json:"url"`
	Difficulty Difficulty `json:"difficulty"`
}

type NewUser struct {
	Title    string `json:"title"`
	Password string `json:"password"`
}

type Query struct {
}

type Question struct {
	ID         string     `json:"ID"`
	Title      string     `json:"title"`
	URL        string     `json:"url"`
	Difficulty Difficulty `json:"difficulty"`
	Complete   bool       `json:"complete"`
}

type QuestionInfo struct {
	Title      string `json:"title"`
	Difficulty string `json:"difficulty"`
}

type UpdateList struct {
	Title             *string        `json:"title,omitempty"`
	Description       *string        `json:"description,omitempty"`
	AddQuestions      []*NewQuestion `json:"addQuestions,omitempty"`
	RemoveQuestionIds []string       `json:"removeQuestionIds,omitempty"`
}

type UpdateQuestion struct {
	Title      *string     `json:"title,omitempty"`
	URL        *string     `json:"url,omitempty"`
	Difficulty *Difficulty `json:"difficulty,omitempty"`
}

type User struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Difficulty string

const (
	DifficultyEasy   Difficulty = "EASY"
	DifficultyMedium Difficulty = "MEDIUM"
	DifficultyHard   Difficulty = "HARD"
)

var AllDifficulty = []Difficulty{
	DifficultyEasy,
	DifficultyMedium,
	DifficultyHard,
}

func (e Difficulty) IsValid() bool {
	switch e {
	case DifficultyEasy, DifficultyMedium, DifficultyHard:
		return true
	}
	return false
}

func (e Difficulty) String() string {
	return string(e)
}

func (e *Difficulty) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Difficulty(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Difficulty", str)
	}
	return nil
}

func (e Difficulty) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
